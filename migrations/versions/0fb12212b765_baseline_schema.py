"""baseline schema

Revision ID: 0fb12212b765
Revises: 
Create Date: 2025-08-18 22:27:32.695189

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0fb12212b765'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('player_name_uq'), table_name='player')
    op.drop_table('player')
    op.drop_index(op.f('game_run_created_at_idx'), table_name='game_run')
    op.drop_index(op.f('game_run_playdate_score_idx'), table_name='game_run')
    op.drop_index(op.f('game_run_player_date_idx'), table_name='game_run')
    op.drop_table('game_run')
    op.drop_index(op.f('ix_gamerun_play_date'), table_name='gamerun')
    op.drop_table('gamerun')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('gamerun',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('play_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('letter', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('theme', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('words_json', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('inputs', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], name=op.f('gamerun_player_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('gamerun_pkey'))
    )
    op.create_index(op.f('ix_gamerun_play_date'), 'gamerun', ['play_date'], unique=False)
    op.create_table('game_run',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('play_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('letter', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('theme', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('words_json', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('inputs', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('char_length(letter) = 1', name=op.f('game_run_letter_check')),
    sa.CheckConstraint('duration > 0', name=op.f('game_run_duration_check')),
    sa.CheckConstraint('inputs >= 0', name=op.f('game_run_inputs_check')),
    sa.CheckConstraint('score >= 0', name=op.f('game_run_score_check')),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], name=op.f('game_run_player_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('game_run_pkey'))
    )
    op.create_index(op.f('game_run_player_date_idx'), 'game_run', ['player_id', 'play_date'], unique=False)
    op.create_index(op.f('game_run_playdate_score_idx'), 'game_run', [sa.literal_column('play_date DESC'), sa.literal_column('score DESC')], unique=False)
    op.create_index(op.f('game_run_created_at_idx'), 'game_run', [sa.literal_column('created_at DESC')], unique=False)
    op.create_table('player',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_uid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('auth_provider', sa.TEXT(), server_default=sa.text("'none'::text"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("auth_provider = ANY (ARRAY['none'::text, 'supabase'::text, 'local'::text])", name=op.f('player_auth_provider_check')),
    sa.PrimaryKeyConstraint('id', name=op.f('player_pkey')),
    sa.UniqueConstraint('name', name=op.f('player_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('user_uid', name=op.f('player_user_uid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('player_name_uq'), 'player', ['name'], unique=True)
    # ### end Alembic commands ###
